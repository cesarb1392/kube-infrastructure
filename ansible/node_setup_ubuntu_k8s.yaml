- hosts: kubeadm_all
  tasks:
  # - name: Check system information
  #   shell:
  #     "lsb_release -a"
  #   register: os_info
  # - debug:
  #     msg: "{{os_info.stdout_lines}}"
  
  # - name: Configure dpkg
  #   become: yes
  #   shell:
  #     "dpkg --configure -a"
  
  # - name: Copy undervoltage script
  #   copy:
  #     src: ./scripts/undervoltage.sh
  #     dest: ~/undervoltage.sh
  #     mode: a+x

  # - name: Copy temperature script
  #   copy:
  #     src: ./scripts/temperature.sh
  #     dest: ~/temperature.sh
  #     mode: a+x

  # - name: Update all packages to their latest version
  #   become: yes
  #   ansible.builtin.apt:
  #     name: "*"
  #     state: latest

  # - name: Upgrade the OS (apt-get dist-upgrade)
  #   become: yes
  #   ansible.builtin.apt:
  #     upgrade: dist
  #     update_cache: yes

  # - name: Pass options to dpkg on run
  #   become: yes
  #   ansible.builtin.apt:
  #     upgrade: dist
  #     update_cache: yes
  #     dpkg_options: 'force-confold,force-confdef'

  # - name: Install packages
  #   become: yes
  #   apt:
  #     name:
  #       - tree
  #       - micro
  #       - zsh
  #       - git
  #       - ufw
  #       - net-tools
  #       - htop
  #       - autoconf
  #       - curl
  #       - gnupg2
  #       - software-properties-common
  #       - apt-transport-https
  #       - ca-certificates
  #     state: latest
  #     cache_valid_time: 600

  # - name: run role for each user
  #   include_role:
  #     name: gantsign.oh-my-zsh
  #   vars:
  #     users:
  #       - username: "banana"
  #         update_mode: auto
  #         update_frequency: 10
  #         oh_my_zsh:
  #           theme: robbyrussell 
  #           plugins:
  #             - git
  #             - zsh-syntax-highlighting
  #             - zsh-autosuggestions
  #             - zsh-completions
  #             - kubectl
  #             - history
  #             - zsh-history-substring-search
  
  # - name: Install spaceship prompt
  #   git:
  #     repo: https://github.com/spaceship-prompt/spaceship-prompt.git
  #     dest: ~/.oh-my-zsh/custom/themes/spaceship-prompt
  #     depth: 1

  # - name: Enable spaceship theme
  #   file:
  #     src: ~/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme
  #     dest: ~/.oh-my-zsh/custom/themes/spaceship.zsh-theme
  #     state: link

  # - name: Install zsh-syntax-highlighting
  #   git:
  #     repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
  #     dest: ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
  #     depth: 1

  # - name: Install zsh-autosuggestions
  #   git:
  #     repo: https://github.com/zsh-users/zsh-autosuggestions.git
  #     dest: ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  #     depth: 1
  # - name: Install zsh-completions
  #   git:
  #     repo: https://github.com/zsh-users/zsh-completions.git
  #     dest: ~/.oh-my-zsh/custom/plugins/zsh-completions
  #     depth: 1

  # - name: Change shell to zsh
  #   become: yes
  #   user:
  #     name: "banana"
  #     shell: /bin/zsh

  # - name: Remove useless packages from the cache
  #   become: yes
  #   ansible.builtin.apt:
  #     autoclean: yes

  # - name: Remove dependencies that are no longer required
  #   become: yes
  #   ansible.builtin.apt:
  #     autoremove: yes

  # - name: Run the equivalent of "apt-get clean" as a separate step
  #   become: yes
  #   apt:
  #     clean: yes

  # - name: allow 22
  #   become: yes
  #   community.general.ufw:
  #     rule: allow
  #     name: OpenSSH

  # - name: Set logging
  #   become: yes
  #   community.general.ufw:
  #     logging: 'on'

  # - name: reject all
  #   become: yes
  #   community.general.ufw:
  #     rule: reject
  #     port: auth
  #     log: true
  
  # - name: enable UFW
  #   become: yes
  #   community.general.ufw:
  #     state: enabled

  # - name: Disable Swap
  #   ansible.builtin.shell: |
  #     sudo swapoff -a && sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  #   args:
  #     executable: /bin/zsh

  # - name: Kernel Parameters
  #   ansible.builtin.shell: |
    #   sudo tee /etc/modules-load.d/containerd.conf <<EOF
    #   overlay
    #   br_netfilter
    #   EOF
    #   sudo modprobe overlay
    #   sudo modprobe br_netfilter
    #   sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
    #   net.bridge.bridge-nf-call-ip6tables = 1
    #   net.bridge.bridge-nf-call-iptables = 1
    #   net.ipv4.ip_forward = 1
    #   EOF
    #   sudo sysctl --system
    # args:
  #     executable: /bin/zsh

  # - name: Reboot
  #   become: yes
  #   ansible.builtin.reboot:
  #     reboot_timeout: 300


# - hosts: kubeadm_armhf
#   tasks:  
#   - name: Add docker apt sources for armhf
#     ansible.builtin.shell: |
#       sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
#       sudo add-apt-repository "deb [arch=armhf] https://download.docker.com/linux/ubuntu jammy stable"
#       sudo apt update
#     args:
#       executable: /bin/zsh


# pending:
# echo "cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1" > /boot/firmware/cmdline.txt
# https://manjit28.medium.com/installing-kubernetes-cluster-on-ubuntu-20-04-or-raspberry-pi-ubuntu-a7eec0856217
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cgroupfs-cgroup-driver
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
  - name:  Install kubectl, kubeadm and kubelet
    ansible.builtin.shell: |
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu jammy stable"
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
      sudo add-apt-repository "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb"
      sudo apt-get update
      sudo apt-get install -y kubelet kubeadm kubectl
      sudo apt-mark hold kubelet kubeadm kubectl
      sudo systemctl enable --now kubelet
      cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
      net.ipv4.ip_forward = 1
      EOF
      sudo sysctl --system
    args:
      executable: /bin/zsh 

  # - name: Install CRI
  #   ansible.builtin.shell: |
  #     sudo apt update
  #     sudo apt install -y containerd.io
  #     containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
  #     sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
  #     sudo systemctl restart containerd
  #     sudo systemctl enable containerd
  #   args:
  #     executable: /bin/zsh      

  - name: Reboot
    become: yes
    ansible.builtin.reboot:
      reboot_timeout: 300

- hosts: kubeadm_main
  tasks:      
  - name: Initialize Kubernetes Cluster with Kubeadm
    ansible.builtin.shell: |
      sudo kubeadm init --pod-network-cidr={{ pod_network_cidr }} --apiserver-advertise-address={{ apiserver_advertise_address }}  --feature-gates CoreDNS=true # --kubernetes-version {{ kubernetes_version }}
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube
    args:
      executable: /bin/zsh      

  - name: copy kubeconfig to local
    fetch:
      dest: ~/.kube/kubeconfig
      src: ~{{ ansible_user }}/.kube/config
      owner: "{{ ansible_user }}"
      mode: "u=rw,g=,o="
      flat: yes

## open ports:
# control plane: 6443 # https://kubernetes.io/docs/reference/networking/ports-and-protocols/#control-plane
# workers: 30000-32767 10250 (Self, Control plane) 10256 (kube-proxy	Self, Load balancers)

# join workers:
# kubeadm token create --print-join-command      

# cni
# work
# https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
# didn't work
# k apply -f https://raw.githubusercontent.com/projectcalico/calico/release-v3.28/manifests/calico.yaml

## install coredns
# https://github.com/coredns/deployment/blob/master/kubernetes/README.md
#  git clone https://github.com/coredns/deployment.git &&  ./deploy.sh | kubectl apply -f -
# kubectl delete --namespace=kube-system deployment kube-dns


## storage
# local-path-provisioner
# kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.26/deploy/local-path-storage.yaml
## secrets
# helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
# k  create ns csi-driver
# helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --namespace csi-driver --set syncSecret.enabled=true --set enableSecretRotation=true